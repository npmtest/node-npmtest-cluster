{"/home/travis/build/npmtest/node-npmtest-cluster/test.js":"/* istanbul instrument in package npmtest_cluster */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cluster/lib.npmtest_cluster.js":"/* istanbul instrument in package npmtest_cluster */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cluster = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cluster = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cluster/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cluster && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cluster */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cluster\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cluster.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cluster.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cluster.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cluster.__dirname + '/lib.npmtest_cluster.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cluster/node_modules/cluster/index.js":"\nmodule.exports = require('./lib/cluster');","/home/travis/build/npmtest/node-npmtest-cluster/node_modules/cluster/lib/cluster.js":"\n/*!\n * Cluster\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Master = require('./master')\n  , fs = require('fs');\n\n/**\n * Export `start` as the module.\n */\n\nexports = module.exports = start;\n\n/**\n * Library version.\n */\n\nexports.version = '0.7.7';\n\n/**\n * Expose utils.\n */\n\nexports.utils = require('./utils');\n\n/**\n * Start a new `Master` with the given `server`.\n *\n * @param {http.Server} server\n * @return {Master}\n * @api public\n */\n\nfunction start(server) {\n  return new Master(server);\n}\n\n/**\n * Expose middleware via lazy-requires.\n */\n\nfs.readdirSync(__dirname + '/plugins').forEach(function(plugin){\n  plugin = plugin.replace('.js', '');\n  exports.__defineGetter__(plugin, function(){\n    return require('./plugins/' + plugin);\n  });\n});","/home/travis/build/npmtest/node-npmtest-cluster/node_modules/cluster/lib/master.js":"\n/*!\n * Cluster - Master\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Worker = require('./worker')\n  , EventEmitter = require('events').EventEmitter\n  , dirname = require('path').dirname\n  , spawn = require('child_process').spawn\n  , utils = require('./utils')\n  , fsBinding = process.binding('fs')\n  , netBinding = process.binding('net')\n  , bind = netBinding.bind\n  , listen = netBinding.listen\n  , socket = netBinding.socket\n  , socketpair = netBinding.socketpair\n  , close = netBinding.close\n  , unlink = fsBinding.unlink\n  , dgram = require('dgram')\n  , tty = require('tty')\n  , net = require('net')\n  , fs = require('fs')\n  , os = require('os');\n\n/**\n * Node binary.\n */\n\nvar node = process.execPath;\n\n/**\n * Start a new `Master` with the given `server` or filename to\n * a node module exporting a server.\n *\n * Options:\n *\n *   - `workers`  Number of workers to spawn, defaults to the number of CPUs\n *   - 'working directory`  Working directory defaulting to the script's dir\n *   - 'backlog` Connection backlog, defaulting to 128\n *   - 'socket port` Master socket port defaulting to `8989`\n *   - 'timeout` Worker shutdown timeout in milliseconds, defaulting to 60,000\n *   - 'user` User id / name\n *   - 'group` Group id / name\n *   - `title` Master process title, defaults to \"cluster master\"\n *   - `worker title` Worker process title, defaults to \"cluster worker {n}\"\n *\n * Events:\n *\n *   - `start`. When the IPC server is prepped\n *   - `worker`. When a worker is spawned, passing the `worker`\n *   - `listening`. When the server is listening for connections  \n *   - `closing`. When master is shutting down\n *   - `close`. When master has completed shutting down\n *   - `worker killed`. When a worker has died\n *   - `worker exception`. Worker uncaughtException. Receives the worker / exception\n *   - `worker removed`. Worker removed via `spawn(-n)`\n *   - `kill`. When a `signal` is being sent to all workers\n *   - `restarting`. Restart requested by REPL or signal. Receives an object\n *      which can be patched in order to preserve plugin state.\n *   - `restart`. Restart complete, new master established, previous died.\n *      Receives an object with state preserved by the `restarting` event.\n *                \n * Signals:\n *\n *   - `SIGINT`   hard shutdown\n *   - `SIGTERM`  hard shutdown\n *   - `SIGQUIT`  graceful shutdown\n *   - `SIGUSR2`  graceful restart\n *\n * @param {net.Server|String} server\n * @return {Master}\n * @api public\n */\n\nvar Master = module.exports = function Master(server) {\n  var self = this;\n  this.server = server;\n  this.plugins = [];\n  this.children = [];\n  this.state = 'active';\n  this.startup = new Date;\n  this._killed = 0;\n\n  // grab server root\n  this.cmd = process.argv.slice(1);\n  this.dir = dirname(this.cmd[0]);\n\n  // environment\n  this.env = process.env.NODE_ENV || 'development';\n\n  // defaults\n  this.options = {\n      'backlog': 128\n    , 'working directory': this.dir\n    , 'socket port': 8989\n    , 'socket addr': '127.0.0.1'\n    , 'timeout': 60000\n    , 'restart threshold': 'development' == this.env ? 5000 : 60000\n    , 'restart timeout': 'development' == this.env ? 5000 : 60000\n    , 'title': 'cluster'\n    , 'worker title': 'cluster worker'\n  };\n\n  // parent master pid\n  this.ppid = process.env.CLUSTER_PARENT_PID\n    ? parseInt(process.env.CLUSTER_PARENT_PID, 10)\n    : null;\n\n  // process is a worker\n  this.isWorker = !! process.env.CLUSTER_MASTER_PID;\n\n  // process is a child (worker or master replacement)\n  this.isChild = this.isWorker || !! process.env.CLUSTER_REPLACEMENT_MASTER;\n\n  // process is master\n  this.isMaster = ! this.isWorker;\n\n  // process id\n  this.pid = process.pid;\n  if (this.isMaster) process.env.CLUSTER_MASTER_PID = this.pid;\n\n  // custom worker fds, defaults to std{out,err}\n  this.customFds = [1, 2];\n\n  // resolve server filename\n  if (this.isWorker && 'string' == typeof this.server) {\n    this.server = require(this.resolve(this.server));\n  }\n\n  // IPC is prepped\n  this.on('start', function(){\n    process.chdir(self.options['working directory']);\n  });\n\n  // spawn our workers\n  this.on('listening', function(){\n    self.spawn(self.options.workers);\n    self.listening = true;\n  });\n\n  // kill children on master exception\n  if (this.isMaster) {\n    process.on('uncaughtException', function(err){\n      self.kill('SIGKILL');\n      console.error(err.stack || String(err));\n      process.exit(1);\n    });\n  }\n};\n\n/**\n * Interit from `EventEmitter.prototype`.\n */\n\nMaster.prototype.__proto__ = EventEmitter.prototype;\n\n/**\n * Worker is a receiver.\n */\n\nrequire('./mixins/receiver')(Master.prototype);\n\n/**\n * Resolve `path` relative to the server file being executed.\n *\n * @param {String} path\n * @return {String}\n * @api public\n */\n\nMaster.prototype.resolve = function(path){\n  return '/' == path[0]\n    ? path\n    : this.dir + '/' + path;\n};\n\n/**\n * Return `true` when the environment set by `Master#in()`\n * matches __NODE_ENV__.\n *\n * @return {Boolean}\n * @api private\n */\n\nMaster.prototype.__defineGetter__('environmentMatches', function(){\n  if (this._env) \n    return this.env == this._env || 'all' == this._env;\n  return true;\n});\n\n/**\n * Invoke masters's `method` with worker `id`. (called from Worker)\n *\n * @param {Number} id\n * @param {String} method\n * @param {...} args\n * @api private\n */\n\nMaster.prototype.call = function(id, method){\n  this.sock = this.sock || dgram.createSocket('udp4');\n\n  var msg = new Buffer(utils.frame({\n      args: utils.toArray(arguments, 2)\n    , method: method\n    , id: id\n  }));\n\n  this.sock.send(\n      msg\n    , 0\n    , msg.length\n    , this.options['socket port']\n    , this.options['socket addr']);\n};\n\n/**\n * Perform setup tasks then invoke `fn()` when present.\n *\n * @param {Function} fn\n * @return {Master} for chaining\n * @api public\n */\n\nMaster.prototype.start = function(fn){\n  var self = this;\n\n  // deferred title\n  process.title = this.options.title;\n\n  // prevent listen\n  if (this.preventDefault) return this;\n\n  // env match\n  if (this.environmentMatches) {\n    // worker process\n    if (this.isWorker) {\n      this.worker = new Worker(this);\n      this.worker.start();\n    // master process\n    } else if (fn) {\n      fn();\n    // standalone\n    } else {\n      this.on('start', function(){ self.emit('listening'); });\n      if (this.isChild) this.acceptFd();\n      this.setupIPC();\n    }\n  }\n\n  return this;\n};\n\n/**\n * Defer `http.Server#listen()` call.\n *\n * @param {Number|String} port or unix domain socket path\n * @param {String|Function} host or callback\n * @param {Function} callback\n * @return {Master} for chaining\n * @api public\n */\n\nMaster.prototype.listen = function(port, host, callback){\n  var self = this;\n  if (!this.environmentMatches) return this;\n  if ('function' == typeof host) callback = host, host = null;\n  this.port = port;\n  this.host = host;\n  this.callback = callback;\n  return this.start(function(){\n    self.on('start', function(){\n      self.startListening(!self.isChild);\n    });\n\n    if (self.isChild) {\n      self.acceptFd();\n    } else {\n      self.createSocket(function(err, fd){\n        if (err) throw err;\n        self.fd = fd;\n        self.setupIPC();\n      });\n    }\n  });\n};\n\n/**\n * Create / return IPC socket.\n *\n * @api private\n */\n\nMaster.prototype.IPCSocket = function(){\n  var self = this;\n  if (this._sock) return this._sock;\n  this._sock = dgram.createSocket('udp4');\n  this._sock.on('message', function(msg, info){\n    try {\n      msg = JSON.parse(msg.toString('ascii'));\n      self.invoke(msg.method, msg.args, self.children[msg.id]);\n    } catch (err) {\n      console.error(err.stack || String(err));\n    }\n  });\n  return this._sock;\n};\n\n/**\n * Setup IPC.\n *\n * @api private\n */\n\nMaster.prototype.setupIPC = function(){\n  var self = this;\n\n  // signal handlers\n  this.registerSignalHandlers();\n\n  // Default worker to the # of cpus\n  this.defaultWorkers();\n\n  // udp server for IPC\n  this.IPCSocket().on('listening', function(){\n    process.nextTick(function(){\n      self.emit('start');\n    });\n  });\n\n  // bind\n  this.IPCSocket().bind(\n      this.options['socket port']\n    , this.options['socket addr']);\n};\n\n/**\n * Conditionally perform the following action, if \n * __NODE_ENV__ matches `env`.\n *\n * Examples:\n *\n *      cluster(server)\n *        .in('development').use(cluster.debug())\n *        .in('development').listen(3000)\n *        .in('production').listen(80);\n *     \n * @param {String} env\n * @return {Master} self or stubs\n * @api public\n */\n\nMaster.prototype.in = function(env){\n  this._env = env;\n  return this;\n};\n\n/**\n * Set option `key` to `val`.\n *\n * @param {String} key\n * @param {Mixed} val\n * @return {Master} for chaining\n * @api public\n */\n\nMaster.prototype.set = function(key, val){\n  if (this.environmentMatches) this.options[key] = val;\n  return this;\n};\n\n/**\n * Invoke `fn(master)`.\n *\n * @param {Function} fn\n * @api public\n */\n\nMaster.prototype.do = function(fn){\n  if (this.environmentMatches) fn.call(this, this);\n  return this;\n};\n\n/**\n * Check if `option` has been set.\n *\n * @param {String} option\n * @return {Boolean}\n * @api public\n */\n\nMaster.prototype.has = function(option){\n  return !! this.options[option];\n};\n\n/**\n * Use the given `plugin`.\n *\n * @param {Function} plugin\n * @return {Master} for chaining\n * @api public\n */\n\nMaster.prototype.use = function(plugin){\n  if (this.environmentMatches) {\n    this.plugins.push(plugin);\n    if (this.isWorker) {\n      plugin.enableInWorker && plugin(this);\n    } else {\n      plugin(this);\n    }\n  }\n  return this;\n};\n\n/**\n * Create listening socket and callback `fn(err, fd)`.\n *\n * @return {Function} fn\n * @api private\n */\n\nMaster.prototype.createSocket = function(fn){\n  var self = this\n    , ipv;\n\n  // explicit host\n  if (this.host) {\n    // ip\n    if (ipv = net.isIP(this.host)) {\n      fn(null, socket('tcp' + ipv));\n    // lookup\n    } else {\n      require('dns').lookup(this.host, function(err, ip, ipv){\n        if (err) return fn(err);\n        self.host = ip;\n        fn(null, socket('tcp' + ipv));\n      });\n    }\n  // local socket\n  } else if ('string' == typeof this.port) {\n    fn(null, socket('unix'));\n  // only port\n  } else if ('number' == typeof this.port) {\n    fn(null, socket('tcp4'));\n  }\n};\n\n/**\n * Register signal handlers.\n *\n * @api private\n */\n\nMaster.prototype.registerSignalHandlers = function(){\n  var self = this;\n  process.on('SIGINT', this.destroy.bind(this));\n  process.on('SIGTERM', this.destroy.bind(this));\n  process.on('SIGQUIT', this.close.bind(this));\n  process.on('SIGUSR2', this.attemptRestart.bind(this));\n  process.on('SIGCHLD', this.maintainWorkerCount.bind(this));\n};\n\n/**\n * Default workers to the number of cpus available.\n *\n * @api private\n */\n\nMaster.prototype.defaultWorkers = function(){\n  if (!this.has('workers')) {\n    this.set('workers', os\n      ? os.cpus().length\n      : 1);\n  }\n};\n\n/**\n * Restart workers only, sending `signal` defaulting\n * to __SIGQUIT__.\n *\n * @param {Type} name\n * @return {Type}\n * @api public\n */\n\nMaster.prototype.restartWorkers = function(signal){\n  this.kill(signal || 'SIGQUIT');\n};\n\n/**\n * Maintain worker count, re-spawning if necessary.\n *\n * @api private\n */\n\nMaster.prototype.maintainWorkerCount = function(){\n  this.children.forEach(function(worker){\n    var pid = worker.proc.pid;\n    if (!pid) this.workerKilled(worker);\n  }, this);\n};\n\n/**\n * Remove `n` workers with `signal`\n * defaulting to __SIGQUIT__.\n *\n * @param {Number} n\n * @param {String} signal\n * @api public\n */\n\nMaster.prototype.remove = function(n, signal){\n  if (!arguments.length) n = 1;\n  var len = this.children.length\n    , worker;\n\n  // cap at worker len\n  if (n > len) n = len;\n\n  // remove the workers\n  while (n--) {\n    worker = this.children.pop();\n    worker.proc.kill(signal || 'SIGQUIT');\n    this.emit('worker removed', worker);\n    this.removeWorker(worker.id);\n  }\n};\n\n/**\n * Remove worker `id`.\n *\n * @param {Number} id\n * @api public\n */\n\nMaster.prototype.removeWorker = function(id){\n  var worker = this.children[id];\n  if (!worker) return;\n  if (worker.fds) {\n    close(worker.fds[0]);\n    close(worker.fds[1]);\n  }\n  delete this.children[id];\n};\n\n/**\n * Spawn `n` workers.\n *\n * @param {Number} n\n * @api public\n */\n\nMaster.prototype.spawn = function(n){\n  if (!arguments.length) n = 1;\n  while (n--) this.spawnWorker();\n};\n\n/**\n * Spawn a worker with optional `id`.\n *\n * @param {Number} id\n * @return {Worker}\n * @api private\n */\n\nMaster.prototype.spawnWorker = function(id){\n  var worker;\n\n  // id given\n  if ('number' == typeof id) {\n    worker = new Worker(this).spawn(id)\n    this.children[id] = worker;\n    worker.id = id;\n  // generate an id\n  } else {\n    worker = new Worker(this).spawn(this.children.length);\n    this.children.push(worker);\n  }\n\n  var obj = {\n      method: 'connect'\n    , args: [worker.id, this.options]\n  };\n\n  worker.sock.write(utils.frame(obj), 'ascii', this.fd);\n\n  // emit\n  this.emit('worker', worker);\n\n  return worker;\n};\n\n/**\n * Graceful shutdown, wait for all workers\n * to reply before exiting.\n *\n * @api public\n */\n\nMaster.prototype.close = function(){\n  this.state = 'graceful shutdown';\n  this.emit('closing');\n  this.kill('SIGQUIT');\n  this.pendingDeaths = this.children.length;\n};\n\n/**\n * Hard shutdwn, immediately kill all workers.\n *\n * @api public\n */\n\nMaster.prototype.destroy = function(){\n  this.state = 'hard shutdown';\n  this.emit('closing');\n  this.kill('SIGKILL');\n  this._destroy();\n};\n\n/**\n * Attempt restart, while respecting the `restart threshold`\n * setting, to help prevent recursive restarts.\n *\n * @param {String} sig\n * @api private\n */\n\nMaster.prototype.attemptRestart = function(sig){\n  var uptime = new Date - this.startup\n    , threshold = this.options['restart threshold']\n    , timeout = this.options['restart timeout'];\n\n  if (this.__restarting) return;\n\n  if (uptime < threshold) {\n    this.__restarting = true;\n    this.emit('cyclic restart');\n    setTimeout(function(self){\n      self.restart(sig);\n    }, timeout, this);\n  } else {\n    this.restart(sig);\n  }\n};\n\n/**\n * Restart all workers, by sending __SIGQUIT__\n * or `sig` to them, enabling master to re-spawn.\n *\n * @param {String} sig\n * @return {ChildProcess} replacement master process\n * @api public\n */\n\nMaster.prototype.restart = function(sig){\n  var data = {}\n    , proc = this.spawnMaster();\n\n  // pass object to plugins, allowing them\n  // to patch it, and utilize the data in\n  // the new Master\n  this.emit('restarting', data);\n  proc.sock.write(utils.frame({\n      method: 'connectMaster'\n    , args: [sig || 'SIGQUIT']\n  }), 'ascii', this.fd);\n\n  this.on('close', function(){\n    proc.sock.write(utils.frame({\n        method: 'masterKilled'\n      , args: [data]\n    }), 'ascii');\n  });\n\n  return proc;\n};\n\n/**\n * Spawn a new master process.\n *\n * @return {ChildProcess}\n * @api private\n */\n\nMaster.prototype.spawnMaster = function(){\n  var fds = socketpair()\n    , customFds = [fds[0], 1, 2]\n    , env = {};\n\n  // merge current env\n  for (var key in process.env) {\n    env[key] = process.env[key];\n  }\n\n  delete env.CLUSTER_MASTER_PID;\n  env.CLUSTER_REPLACEMENT_MASTER = 1;\n  env.CLUSTER_PARENT_PID = this.pid;\n\n  // spawn new master process\n  var proc = spawn(node, this.cmd, {\n      customFds: customFds\n    , env: env\n  });\n  \n  // unix domain socket for ICP + fd passing\n  proc.sock = new net.Socket(fds[1], 'unix');\n  return proc;\n};\n\n/**\n * Master replacement connected.\n *\n * @param {String} sig\n * @api private\n */\n\nMaster.prototype.connectMaster = function(sig){\n  var self = this;\n\n  function kill(){\n    process.kill(self.ppid, sig);\n  }\n\n  if (this.listening) return kill();\n  this.on('listening', kill);\n};\n\n/**\n * Original master has died aka 'retired',\n * we now fire the 'restart' event.\n *\n * @param {Object} data\n * @api private\n */\n\nMaster.prototype.masterKilled = function(data){\n  this.emit('restart', data);\n};\n\n/**\n * Accept fd from parent master, then `setupIPC()`.\n *\n * @api private\n */\n\nMaster.prototype.acceptFd = function(){\n  var self = this\n    , stdin = new net.Socket(0, 'unix');\n\n  // set fd and start master\n  stdin.setEncoding('ascii');\n  stdin.on('fd', function(fd){\n    self.fd = fd;\n    self.setupIPC();\n  });\n\n  // frame commands from the parent master\n  stdin.on('data', this.frame.bind(this));\n  stdin.resume();\n};\n\n/**\n * Close servers and emit 'close' before exiting.\n *\n * @api private\n */\n\nMaster.prototype._destroy = function(){\n  this.IPCSocket().close();\n  if (this.fd) close(this.fd);\n  this.emit('close');\n  process.nextTick(process.exit.bind(process));\n};\n\n/**\n * Worker is connected.\n *\n * @param {Worker} worker\n * @api private\n */\n\nMaster.prototype.connect = function(worker){\n  this.emit('worker connected', worker);\n};\n\n/**\n * Start listening, when `shouldBind` is `true` the socket\n * will be bound, and will start listening for connections.\n *\n * @param {Boolean} shouldBind\n * @api private\n */\n\nMaster.prototype.startListening = function(shouldBind){\n  var self = this;\n\n  // remove unix domain socket \n  if ('string' == typeof this.port && shouldBind) {\n    fs.unlink(this.port, function(err){\n      if (err && 'ENOENT' != err.code) throw err;\n      startListening();\n    });\n  } else {\n    startListening();\n  }\n\n  // bind / listen\n  function startListening() {\n    if (shouldBind) {\n      try {\n        bind(self.fd, self.port, self.host);\n        listen(self.fd, self.options.backlog);\n      } catch(e) {\n        self.kill('SIGKILL');\n        throw e;\n      }\n    }\n    self.callback && self.callback();\n    self.emit('listening');\n  }\n};\n\n/**\n * The given `worker` has been killed.\n * Emit the \"worker killed\" event, remove\n * the worker, and re-spawn depending on \n * the master state.\n *\n * @api private\n */\n\nMaster.prototype.workerKilled = function(worker){\n  // if we have many failing workers at boot\n  // then we likely have a serious issue.\n  if (new Date - this.startup < 20000) {\n    if (++this._killed == 20) {\n      console.error('');\n      console.error('Cluster detected over 20 worker deaths in the first');\n      console.error('20 seconds of life, there is most likely');\n      console.error('a serious issue with your server.');\n      console.error('');\n      console.error('aborting.');\n      console.error('');\n      process.exit(1);\n    }\n  }\n\n  // emit event\n  this.emit('worker killed', worker);\n\n  // always remove worker\n  this.removeWorker(worker.id);\n\n  // state specifics\n  switch (this.state) {\n    case 'hard shutdown':\n      break;\n    case 'graceful shutdown':\n      --this.pendingDeaths || this._destroy();\n      break;\n    default:\n      this.spawnWorker(worker.id);\n  }\n};\n\n/**\n * `worker` received exception `err`.\n *\n * @api private\n */\n\nMaster.prototype.workerException = function(worker, err){\n  this.emit('worker exception', worker, err);\n};\n\n/**\n * Received worker timeout.\n * \n * @api private\n */\n\nMaster.prototype.workerTimeout = function(worker, timeout){\n  this.emit('worker timeout', worker, timeout);\n};\n\n/**\n * Worker waiting on `connections` to close.\n * \n * @api private\n */\n\nMaster.prototype.workerWaiting = function(worker, connections){\n  this.emit('worker waiting', worker, connections);\n};\n\n/**\n * Send `sig` to all worker processes, defaults to __SIGTERM__.\n *\n * @param {String} sig\n * @api public\n */\n\nMaster.prototype.kill = function(sig){\n  var self = this;\n  this.emit('kill', sig);\n  this.children.forEach(function(worker){\n    worker.proc.kill(sig);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-cluster/node_modules/cluster/lib/worker.js":"\n/*!\n * Cluster - Worker\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter\n  , spawn = require('child_process').spawn\n  , binding = process.binding('net')\n  , utils = require('./utils')\n  , net = require('net');\n\n/**\n * Node binary.\n */\n\nvar node = process.execPath;\n\n/**\n * Initialize a new `Worker` with the given `master`.\n *\n * Signals:\n *\n *   - `SIGINT`   immediately exit\n *   - `SIGTERM`  immediately exit\n *   - `SIGQUIT`  graceful exit\n *\n * @param {Master} master\n * @api private\n */\n\nvar Worker = module.exports = function Worker(master) {\n  this.master = master;\n  this.server = master.server;\n};\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\n\nWorker.prototype.__proto__ = EventEmitter.prototype;\n\n/**\n * Worker is a receiver.\n */\n\nrequire('./mixins/receiver')(Worker.prototype);\n\n/**\n * Start worker.\n *\n * @api private\n */\n\nWorker.prototype.start = function(){\n  var self = this\n    , call = this.master.call;\n\n  // proxy to provide worker id\n  this.master.call = function(){\n    var args = utils.toArray(arguments);\n    // Allow calling master methods that\n    // don't take worker as first argument\n    if (false !== args[0]) args.unshift(self.id);\n    return call.apply(this, args);\n  };\n\n  // stdin\n  this.stdin = new net.Socket(0, 'unix');\n  this.stdin.setEncoding('ascii');\n  this.stdin.on('data', this.frame.bind(this));\n  this.stdin.resume();\n\n  // demote usr/group\n  if (this.server && this.server.listenFD) {\n    this.server.on('listening', function(){\n      var group = self.options.group;\n      if (group) process.setgid(group);\n      var user = self.options.user;\n      if (user) process.setuid(user);\n    });\n\n    // stdin\n    this.stdin.on('fd', this.server.listenFD.bind(this.server));\n  }\n\n  // signal handlers\n  process.on('SIGINT', this.destroy.bind(this));\n  process.on('SIGTERM', this.destroy.bind(this));\n  process.on('SIGQUIT', this.close.bind(this));\n\n  // conditionally handle uncaughtException\n  process.nextTick(function(){\n    if (!process.listeners('uncaughtException').length) {\n      process.on('uncaughtException', function(err){\n        // stderr for logs\n        console.error(err.stack || err.message);\n\n        // report exception\n        self.master.call('workerException', err);\n\n        // exit\n        process.nextTick(function(){\n          self.destroy();\n        });\n      });\n    }\n  });\n};\n\n/**\n * Received connect event, set the worker `id`\n * and `options`.\n *\n * @param {String} id\n * @param {Object} options\n * @api private\n */\n\nWorker.prototype.connect = function(id, options){\n  this.options = options;\n\n  // worker id\n  this.id = id;\n\n  // timeout\n  this.timeout = options.timeout;\n\n  // title\n  process.title = options['worker title'].replace('{n}', id);\n\n  // notify master of connection\n  this.master.call('connect');\n};\n\n/**\n * Immediate shutdown.\n *\n * @api private\n */\n\nWorker.prototype.destroy = function(){\n  this.emit('close');\n  process.nextTick(process.exit);\n};\n\n/**\n * Perform graceful shutdown.\n *\n * @api private\n */\n\nWorker.prototype.close = function(){\n  var self = this\n    , server = this.server;\n\n  if (server && server.connections) {\n    // stop accepting\n    server.watcher.stop();\n\n    // check pending connections\n    setInterval(function(){\n      self.master.call('workerWaiting', server.connections);\n      server.connections || self.destroy();\n    }, 2000);\n\n    // timeout\n    if (this.timeout) {\n      setTimeout(function(){\n        self.master.call('workerTimeout', self.timeout);\n        self.destroy();\n      }, this.timeout);\n    }\n  } else {\n    this.destroy();\n  }\n};\n\n/**\n * Spawn the worker with the given `id`.\n *\n * @param {Number} id\n * @return {Worker} for chaining\n * @api private\n */\n\nWorker.prototype.spawn = function(id){\n  var fds = binding.socketpair()\n    , customFds = [fds[0]].concat(this.master.customFds)\n    , env = {};\n\n  // merge env\n  for (var key in process.env) {\n    env[key] = process.env[key];\n  }\n\n  this.id = env.CLUSTER_WORKER = id;\n\n  // spawn worker process\n  this.proc = spawn(\n      node\n    , this.master.cmd\n    , { customFds: customFds, env: env });\n\n  // unix domain socket for ICP + fd passing\n  this.sock = new net.Socket(fds[1], 'unix');\n\n  // saving file descriptors for later use\n  this.fds = fds;\n\n  return this;\n};\n\n/**\n * Invoke worker's `method` (called from Master).\n *\n * @param {String} method\n * @param {...} args\n * @api private\n */\n\nWorker.prototype.call = function(method){\n  this.sock.write(utils.frame({\n      args: utils.toArray(arguments, 1)\n    , method: method\n  }), 'ascii');\n};\n","/home/travis/build/npmtest/node-npmtest-cluster/node_modules/cluster/lib/utils.js":"\n/*!\n * Cluster - utils\n * Copyright (c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Frame the given `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nexports.frame = function(obj){\n  return JSON.stringify(obj) + '\\n';\n};\n\n/**\n * Fast alternative to `Array.prototype.slice.call()`.\n *\n * @param {Arguments} args\n * @param {Number} index\n * @return {Array}\n * @api private\n */\n\nexports.toArray = function(args, index){\n  var arr = []\n    , len = args.length;\n  for (var i = (index || 0); i < len; ++i) {\n    arr.push(args[i]);\n  }\n  return arr;\n};\n\n/**\n * Format byte-size.\n *\n * @param {Number} bytes\n * @return {String}\n * @api private\n */\n\nexports.formatBytes = function(bytes) {\n  var kb = 1024\n    , mb = 1024 * kb\n    , gb = 1024 * mb;\n  if (bytes < kb) return bytes + 'b';\n  if (bytes < mb) return (bytes / kb).toFixed(2) + 'kb';\n  if (bytes < gb) return (bytes / mb).toFixed(2) + 'mb';\n  return (bytes / gb).toFixed(2) + 'gb';\n};\n\n/**\n * Format date difference between `a` and `b`.\n *\n * @param {Date} a\n * @param {Date} b\n * @return {String}\n * @api private\n */\n\nexports.formatDateRange = function(a, b) {\n  var diff = a > b ? a - b : b - a\n    , second = 1000\n    , minute = second * 60\n    , hour = minute * 60\n    , day = hour * 24;\n\n  function unit(name, n) {\n    return n + ' ' + name + (1 == n ? '' : 's'); \n  }\n\n  if (diff < second) return unit('millisecond', diff);\n  if (diff < minute) return unit('second', (diff / second).toFixed(0));\n  if (diff < hour) return unit('minute', (diff / minute).toFixed(0));\n  if (diff < day) return unit('hour', (diff / hour).toFixed(0));\n  return unit('day', (diff / day).toFixed(1));\n};\n\n/**\n * Unshift a callback.\n *\n * @param {Object} obj\n * @param {String} event\n * @param {String} fn\n * @api private\n */\n\nexports.unshiftListener = function(obj, event, fn){\n  if (Array.isArray(obj._events[event])) {\n    obj._events[event].unshift(fn);\n  } else {\n    obj._events[event] = [fn, obj._events[event]];\n  }\n};","/home/travis/build/npmtest/node-npmtest-cluster/node_modules/cluster/lib/mixins/receiver.js":"\n/*!\n * Cluster - receiver mixin\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\nmodule.exports = function(obj){\n\n  /**\n   * Initialize buffer.\n   */\n\n  obj._buf = '';\n\n  /**\n   * Frame incoming command, buffering the given `chunk`\n   * until a frame is complete. Frames are delimited by a\n   * line feed.\n   *\n   * @param {String} chunk\n   * @api private\n   */\n\n  obj.frame = function(chunk){\n    for (var i = 0, len = chunk.length; i < len; ++i) {\n      if ('\\n' == chunk[i]) {\n        var worker\n          , obj = JSON.parse(this._buf);\n        this._buf = '';\n        if ('number' == typeof obj.id) worker = this.children[obj.id];\n        this.invoke(obj.method, obj.args, worker);\n      } else {\n        this._buf += chunk[i];\n      }\n    }\n  };\n\n  /**\n   * Invoke `method` with the given `args`.\n   *\n   * @param {String} method\n   * @param {Mixed} args\n   * @param {Worker} worker\n   * @api private\n   */\n\n  obj.invoke = function(method, args, worker){\n    if (!method) return;\n    if (!Array.isArray(args)) args = [args];\n    if (worker) args.unshift(worker);\n    if (!this[method]) throw new Error('method ' + method + '() does not exist');\n    this[method].apply(this, args);\n  };\n};","/home/travis/build/npmtest/node-npmtest-cluster/node_modules/cluster/lib/plugins/cli.js":"\n/*!\n * Cluster - cli\n * Copyright (c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs')\n  , Log = require('log');\n\n/**\n * Commands.\n */\n\nvar commands = [];\n\n/**\n * Adds a command-line interface to your cluster.\n *\n * This plugin requires that you use `pidfiles()`\n * above `cli()`, so that the pidfile directory\n * is exposed.\n *\n * Examples:\n *\n *     cluster(server)\n *       .use(cluster.pidfiles())\n *       .use(cluster.cli())\n *       .listen(3000);\n *\n * Once set up our server script serves as both\n * the master, and the CLI. For example we may\n * still launch the server(s) as shown below.\n *\n *      $ nohup node server.js &\n *\n * However now we may also utilize commands\n * provided by this plugin.\n *\n *     $ node server.js status\n *\n *       master 3281 dead\n *       worker 0 3282 dead\n *\n * For more command information use `--help`.\n *\n *     $ node server.js --help\n *\n * @return {Function}\n * @api public\n */\n\nexports = module.exports = function(){\n  return function(master){\n    requirePIDs(master);\n\n    // augment master\n    master.killall = function(sig){\n      var pid = master.pidof('master');\n      try {\n        // signal master\n        process.kill(pid, sig);\n      } catch (err) {\n        if ('ESRCH' != err.code) throw err;\n        // signal children individually\n        master.workerpids().forEach(function(pid){\n          try {\n            process.kill(pid, sig);\n          } catch (err) {\n            if ('ESRCH' != err.code) throw err;\n          }\n        });\n      }\n    };\n\n    var args = process.argv.slice(2)\n      , len = commands.length\n      , command\n      , arg;\n\n    // parse arguments\n    while (args.length) {\n      arg = args.shift();\n      for (var i = 0; i < len; ++i) {\n        command = commands[i];\n        if (~command.flags.indexOf(arg)) {\n          command.callback(master);\n          master.preventDefault = true;\n        }\n      }\n    }\n  }\n};\n\n/**\n * Define command `name` with the given callback `fn(master)`\n * and a short `desc`.\n *\n * @param {String} name\n * @param {Function} fn\n * @param {String} desc\n * @return {Object} exports for chaining\n * @api public\n */\n\nvar define = exports.define = function(name, fn, desc){\n  commands.push({\n      flags: name.split(/ *, */)\n    , desc: desc\n    , callback: fn\n  });\n  return exports;\n};\n\n/**\n * Report master / worker status based on\n * the PID files saved by the pidfiles()\n * plugin.\n */\n\ndefine('-s, --status, status', function(master){\n  var dir = master.pidfiles\n    , files = fs.readdirSync(dir);\n\n  // null signal failed previous\n  // to this release\n  if (process.version < 'v0.4.1') {\n    console.log('status will not work with node < 0.4.1');\n    console.log('due to SIGTERM globbering the null signal');\n    process.exit(1);\n  }\n\n  console.log();\n\n  // only pids\n  files.filter(function(file){\n    return file.match(/\\.pid$/);\n  // check status\n  }).forEach(function(file){\n    var name = file.replace('.pid', '')\n      , pid = master.pidof(name)\n      , name = name.replace('.', ' ')\n      , color\n      , status;\n\n    try {\n      process.kill(pid, 0);\n      status = 'alive';\n      color = '36';\n    } catch (err) {\n      if ('ESRCH' == err.code) {\n        color = '31';\n        status = 'dead';\n      } else {\n        throw err;\n      }\n    }\n\n    console.log('  %s\\033[90m %d\\033[0m \\033[' + color + 'm%s\\033[0m'\n      , name\n      , pid\n      , status);\n  });\n\n  console.log();\n}, 'Output cluster status');\n\n/**\n * Restart workers.\n */\n\ndefine('-r, --restart, restart', function(master){\n  master.killall('SIGUSR2');\n}, 'Restart master by sending the SIGUSR2 signal');\n\n/**\n * Graceful shutdown.\n */\n\ndefine('-g, --shutdown, shutdown', function(master){\n  master.killall('SIGQUIT');\n}, 'Graceful shutdown by sending the SIGQUIT signal');\n\n/**\n * Hard shutdown.\n */\n\ndefine('-S, --stop, stop', function(master){\n  master.killall('SIGTERM');\n}, 'Hard shutdown by sending the SIGTERM signal');\n\n/**\n * Display help information.\n */\n\ndefine('-h, --help, help', function(master){\n  console.log('\\n  Usage: node <file> <command>\\n');\n  commands.forEach(function(command){\n    console.log('    '\n      + command.flags.join(', ')\n      + '\\n    '\n      + '\\033[90m' + command.desc + '\\033[0m'\n      + '\\n');\n  });\n  console.log();\n}, 'Show help information');\n\n/**\n * Output cluster version.\n */\n\ndefine('-v, --version', function(master){\n  console.log(require('../cluster').version);\n}, 'Output cluster version');\n\n/**\n * Require `pidfiles()` plugin.\n *\n * @param {Master} master\n * @api private\n */\n\nfunction requirePIDs(master) {\n  if (master.pidfiles) return;\n  throw new Error('cli() plugin requires pidfiles(), please add pidfiles() before cli()');\n}","/home/travis/build/npmtest/node-npmtest-cluster/node_modules/cluster/lib/plugins/debug.js":"\n/*!\n * Cluster - debug\n * Copyright (c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Enable verbose debugging output.\n *\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function(options){\n  options = options || {};\n\n  // strip colors\n\n  function color(text) {\n    if (options.colors === false) return text.replace(/\\033\\[\\d+m/g, '');\n    return text\n  }\n\n  // logger\n\n  var log = {\n    debug: function(str){\n      console.error(color('  \\033[90mdebug - %s\\033[0m'), str);\n    },\n    info: function(str){\n      console.error(color('  info \\033[90m- %s\\033[0m'), str);\n    },\n    warning: function(str){\n      console.error(color('  \\033[33mwarning\\033[0m \\033[90m- %s\\033[0m'), str);\n    },\n    error: function(str){\n      console.error(color('  \\033[31merror\\033[0m \\033[90m- %s\\033[0m'), str);\n    }\n  };\n\n  return function(master){\n\n    // start\n    master.on('start', function(){\n      log.info('master started');\n    });\n\n    // closing\n    master.on('closing', function(){\n      log.info('shutting down');\n    });\n\n    // close\n    master.on('close', function(){\n      log.info('shutdown complete');\n    });\n\n    // killing workers\n    master.on('kill', function(sig){\n      log.warning('kill(' + (sig || 'SIGTERM') + ')');\n    });\n\n    // worker died\n    master.on('worker killed', function(worker){\n      if ('restarting' == master.state) return;\n      log.warning('worker ' + worker.id + ' died');\n    });\n\n    // worker exception\n    master.on('worker exception', function(worker, err){\n      log.error('worker ' + worker.id + ' uncaught exception ' + err.message);\n    });\n\n    // worker is waiting on connections to be closed\n    master.on('worker waiting', function(worker, connections){\n      log.warning('worker ' + worker.id + ' waiting on ' + connections + ' connections');\n    });\n\n    // worker has timed out\n    master.on('worker timeout', function(worker, timeout){\n      log.warning('worker ' + worker.id + ' timed out after ' + timeout + 'ms');\n    });\n\n    // connection\n    master.on('worker connected', function(worker){\n      log.info('worker ' + worker.id + ' connected');\n    });\n    \n    // removed\n    master.on('worker removed', function(worker){\n      log.info('worker ' + worker.id + ' removed');\n    });\n\n    // worker\n    master.on('worker', function(worker){\n      log.info('worker ' + worker.id + ' spawned');\n    });\n\n    // listening\n    master.on('listening', function(){\n      log.info('listening for connections');\n    });\n\n    // cyclic or immediate restart\n    master.on('cyclic restart', function(){\n      log.warning('cyclic restart detected, restarting in ' + master.options['restart timeout'] + 'ms');\n    });\n\n    // restart requested\n    master.on('restarting', function(){\n      log.info('restart requested');\n    });\n\n    // restart complete\n    master.on('restart', function(){\n      log.info('restart complete');\n    });\n\n    // exit\n    process.on('exit', function(){\n      log.debug('exit');\n    });\n  }\n};","/home/travis/build/npmtest/node-npmtest-cluster/node_modules/cluster/lib/plugins/logger.js":"\n/*!\n * Cluster - logger\n * Copyright (c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs')\n  , Log = require('log')\n  , mkdir = require('mkdirp').mkdirp;\n\n/**\n * Enable stdout / stderr logs for both the master\n * process, as well as workers.\n *\n * These output to the given `dir`, or `./logs`\n * relative to the server's file.\n *\n * Examples:\n *\n *    // log to ./logs\n *    engine(server)\n *      .use(engine.logger())\n *      .listen(3000);\n *\n *    // log to ./app/logs\n *    engine(server)\n *      .use(engine.logger('./app/logs'))\n *      .listen(3000);\n *\n *    // log to /var/log/node\n *    engine(server)\n *      .use(engine.logger('/var/log/node'))\n *      .listen(3000);\n *\n * @param {String} dir\n * @param {Number} level\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function(dir, level){\n  return function(master){\n    dir = master.resolve(dir || 'logs');\n\n    mkdir(dir, 0755, function(err){\n      if (err) throw err;\n      // master log\n      var stream = fs.createWriteStream(dir + '/master.log', { flags: 'a' });\n      var log = master.log = new Log(level || Log.INFO, stream);\n\n      // master events\n      master.on('start', function(){\n        log.info('master started');\n      });\n\n      // master is shutting down\n      master.on('closing', function(){\n        log.warning('shutting down master');\n      });\n\n      // master has closed and performed cleanup\n      master.on('close', function(){\n        log.info('shutdown complete');\n      });\n\n      // sending signal to all workers\n      master.on('kill', function(sig){\n        log.warning('sent kill(%s) to all workers', sig);\n      });\n\n      // worker was killed\n      master.on('worker killed', function(worker){\n        if ('restarting' == master.state) return;\n        log.error('worker %s died', worker.id);\n      });\n\n      // worker exception\n      master.on('worker exception', function(worker, err){\n        log.error('worker %s uncaught exception %s', worker.id, err.message);\n      });\n\n      // worker is waiting on connections to be closed\n      master.on('worker waiting', function(worker, connections){\n        log.info('worker %s waiting on %s connections', worker.id, connections);\n      });\n\n      // worker has timed out\n      master.on('worker timeout', function(worker, timeout){\n        log.warning('worker %s timed out after %sms', worker.id, timeout);\n      });\n\n      // worker connected to master\n      master.on('worker connected', function(worker){\n        log.debug('worker %s connected', worker.id);\n      });\n\n      // cyclic or immediate restart\n      master.on('cyclic restart', function(){\n        log.warning('cyclic restart detected, restarting in %sms'\n          , master.options['restart timeout']);\n      });\n\n      // restart requested\n      master.on('restarting', function(){\n        log.info('restart requested');\n      });\n\n      // restart complete\n      master.on('restart', function(){\n        log.info('restart complete');\n      });\n\n      // repl socket connection established\n      master.on('repl socket', function(sock){\n        var from = sock.remoteAddress\n          ? 'from ' + sock.remoteAddress\n          : '';\n        sock.on('connect', function(){\n          log.info('repl connection %s', from);\n        });\n        sock.on('close', function(){\n          log.info('repl disconnect %s', from);\n        });\n      });\n\n      // override fds\n      master.customFds = [-1, -1];\n\n      // children\n      master.on('worker', function(worker){\n        var proc = worker.proc;\n\n        log.info('spawned worker ' + worker.id);\n\n        // worker log streams\n        var access = fs.createWriteStream(dir + '/workers.access.log', { flags: 'a' })\n          , error = fs.createWriteStream(dir + '/workers.error.log', { flags: 'a' });\n\n        // redirect stdout / stderr\n        proc.stdout.pipe(access);\n        proc.stderr.pipe(error);\n      });\n    });\n  }\n};","/home/travis/build/npmtest/node-npmtest-cluster/node_modules/cluster/lib/plugins/pidfiles.js":"\n/*!\n * Cluster - pidfiles\n * Copyright (c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs')\n  , mkdir = require('mkdirp').mkdirp;\n\n/**\n * Save pidfiles to the given `dir` or `./pids`.\n *\n * Examples:\n *\n *    // save to ./pids\n *    cluster(server)\n *      .use(cluster.pidfiles())\n *      .listen(3000);\n *\n *    // save to /tmp\n *    cluster(server)\n *      .use(cluster.pidfiles('/tmp'))\n *      .listen(3000);\n *\n *    // save to /var/run/node\n *    cluster(server)\n *      .use(cluster.logger('/var/run/node'))\n *      .listen(3000);\n *\n * @param {String} dir\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function(dir){\n  return function(master){\n    dir = master.pidfiles = master.resolve(dir || 'pids');\n\n    // augment master\n    master.pidof = function(name){\n      var dir = master.pidfiles\n        , path = dir + '/' + name + '.pid'\n        , pid = fs.readFileSync(path, 'ascii');\n\n      return parseInt(pid, 10);\n    };\n\n    master.workerpids = function(){\n      var dir = master.pidfiles;\n      return fs.readdirSync(dir).filter(function(file){\n        return file.match(/^worker\\./);\n      }).map(function(file){\n        return parseInt(fs.readFileSync(dir + '/' + file, 'ascii'), 10);\n      });\n    };\n\n    mkdir(dir, 0755, function(err){\n      if (err) throw err;\n\n      // save worker pids\n      master.on('worker', function(worker){\n        var path = dir + '/worker.' + worker.id + '.pid';\n        fs.writeFile(path, worker.proc.pid.toString(), 'ascii', function(err){\n          if (err) throw err;\n          master.emit('worker pidfile');\n        });\n      });\n\n      master.on('listening', function(){\n        // save master pid\n        fs.writeFile(dir + '/master.pid', process.pid.toString(), 'ascii', function(err){\n          if (err) throw err; \n          master.emit('pidfile');\n        });\n      });\n    });\n  }\n};","/home/travis/build/npmtest/node-npmtest-cluster/node_modules/cluster/lib/plugins/reload.js":"/*!\n * Cluster - reload\n * Copyright (c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs')\n  , basename = require('path').basename\n  , extname = require('path').extname;\n\n/**\n * Restart the server the given js `files` have changed.\n * `files` may be several directories, filenames, etc,\n * defaulting to the server's root directory.\n *\n * Options:\n *\n *   - `signal` Signal defaulting to __SIGTERM__\n *   - `interval` Watcher interval, defaulting to `100`\n *   - `extensions` File extensions to watch, defaults to ['.js']\n *\n * Examples:\n *\n *     cluster(server)\n *       .use(cluster.reload())\n *       .listen(3000);\n *\n *     cluster(server)\n *       .use(cluster.reload('lib'))\n *       .listen(3000);\n *     \n *     cluster(server)\n *       .use(cluster.reload(['lib', 'tests', 'index.js']))\n *       .listen(3000);\n *\n *     cluster(server)\n *       .use(cluster.reload('lib', { interval: 60000 }))\n *       .listen(3000);\n *\n *     cluster(server)\n *       .use(cluster.reload('lib', { extensions: ['.js', '.coffee'] }))\n *       .listen(3000);\n *\n * Ignore Directories:\n *\n *  By default `reload()` will ignore the following directories:\n *\n *   - node_modules\n *   - support\n *   - examples\n *   - test\n *   - bin\n *\n *  Alter with `reload.ignoreDirectories`\n *\n *      cluster.reload.ignoreDirectories.push('src');\n *\n * @param {String|Array} files\n * @param {Options} options\n * @return {Function}\n * @api public\n */\n\nexports = module.exports = function(files, options){\n  options = options || {};\n\n  // defaults\n  var interval = options.interval || 100\n    , extensions = options.extensions || ['.js']\n    , signal = options.signal || 'SIGTERM';\n\n  return function(master){\n    if (!files) files = master.dir;\n    if (!Array.isArray(files)) files = [files];\n    files.forEach(traverse);\n\n    // traverse file if it is a directory\n    // otherwise setup the watcher\n    function traverse(file) {\n      file = master.resolve(file);\n      fs.stat(file, function(err, stat){\n        if (!err) {\n          if (stat.isDirectory()) {\n            if (~exports.ignoreDirectories.indexOf(basename(file))) return;\n            fs.readdir(file, function(err, files){\n              files.map(function(f){\n                return file + '/' + f;\n              }).forEach(traverse);\n            });\n          } else {\n            watch(file);\n          }\n        }\n      });\n    }\n\n    // watch file for changes\n    function watch(file) {\n      if (!~extensions.indexOf(extname(file))) return;\n      fs.watchFile(file, { interval: interval }, function(curr, prev){\n        if (curr.mtime > prev.mtime) {\n          console.log('  \\033[36mchanged\\033[0m \\033[90m- %s\\033[0m', file);\n          master.restartWorkers(signal);\n        }\n      });\n    }\n  }\n};\n\n/**\n * Directories to ignore.\n */\n\nexports.ignoreDirectories = ['node_modules', 'support', 'test', 'bin'];","/home/travis/build/npmtest/node-npmtest-cluster/node_modules/cluster/lib/plugins/repl.js":"\n/*!\n * Cluster - repl\n * Copyright (c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar net = require('net')\n  , repl = require('repl');\n\n/**\n * Enable REPL with all arguments passed to `net.Server#listen()`.\n *\n * Examples:\n *\n *    cluster(server)\n *      .use(cluster.stats())\n *      .use(cluster.repl('/var/run/cluster'))\n *      .listen();\n *\n * In the terminal:\n *\n *    $ sudo telnet /var/run/cluster \n *\n * @return {Function}\n * @api public\n */\n\nexports = module.exports = function(){\n  var args = arguments;\n  if (!args.length) throw new Error('repl() plugin requires port/host or path');\n  return function(master){\n    var server\n      , sockets = [];\n\n\n    // start repl\n    function start(){\n      // TCP or unix-domain socket repl\n      server = net.createServer(function(sock){\n        sockets.push(sock);\n        var ctx = repl.start('cluster> ', sock).context;\n        master.emit('repl socket', sock);\n\n        // augment socket to provide some formatting methods\n        sock.title = function(str){ this.write('\\n  \\033[36m' + str + '\\033[0m\\n'); }\n        sock.row = function(key, val){ this.write('  \\033[90m' + key + ':\\033[0m ' + val + '\\n'); }\n\n        // merge commands into context\n        // executing in context of master\n        Object.keys(exports).forEach(function(cmd){\n          ctx[cmd] = function(){\n            var args = Array.prototype.slice.call(arguments);\n            args.unshift(master, sock);\n            return exports[cmd].apply(master, args);\n          };\n        });\n      });\n\n      // Apply all arguments given\n      server.listen.apply(server, args);\n    }\n\n    // initial master starts immediately\n    // replacements starts when the previous \n    // has closed\n    master.on(master.isChild\n        ? 'restart'\n        : 'start', start);\n\n    // restart notification\n    master.on('restarting', function(){\n      sockets.forEach(function(sock){\n        if (sock.fd) {\n          sock.write('\\n\\033[33mrestarting\\033[0m - closing connection soon\\n');\n        }\n      });\n    });\n\n    // close\n    master.on('close', function(){\n      sockets.forEach(function(sock){\n        sock.fd && sock.end();\n      });\n      if (server && server.fd) server.close();\n    });\n  }\n};\n\n/**\n * Define function `name`, with the given callback\n * `fn(master, sock, ...)` and `description`.\n *\n * @param {String} name\n * @param {Function} fn\n * @param {String} desc\n * @return {Object} exports for chaining\n * @api public\n */\n\nvar define = exports.define = function(name, fn, desc){\n  (exports[name] = fn).description = desc;\n  return exports;\n};\n\n/**\n * Display commmand help.\n */\n\ndefine('help', function(master, sock){\n  sock.title('Commands');\n  Object.keys(exports).forEach(function(cmd){\n    if ('define' == cmd) return;\n\n    var fn = exports[cmd]\n      , params = fn.toString().match(/^function +\\((.*?)\\)/)[1]\n      , params = params.split(/ *, */).slice(2);\n\n    sock.row(\n      cmd + '(' + params.join(', ') + ')'\n      , fn.description);\n  });\n  sock.write('\\n');\n}, 'Display help information');\n\n/**\n * Spawn `n` additional workers with the given `signal`.\n */\n\ndefine('spawn', function(master, sock, n, signal){\n  n = n || 1;\n  if (n < 0) {\n    n = Math.abs(n);\n    sock.write('removing ' + n + ' worker' + (n > 1 ? 's' : '')\n      + ' with ' + (signal || 'SIGQUIT') + '\\n');\n    master.remove(n, signal);\n  } else {\n    sock.write('spawning ' + n + ' worker' + (n > 1 ? 's' : '') + '\\n');\n    master.spawn(n);\n  }\n}, 'Spawn one or more additional workers, or remove one or more');\n\n/**\n * Output process ids.\n */\n\ndefine('pids', function(master, sock){\n  sock.title('pids');\n  sock.row('master', process.pid);\n  master.children.forEach(function(worker){\n    sock.row('worker #' + worker.id, worker.proc.pid);\n  });\n  sock.write('\\n');\n}, 'Output process ids');\n\n/**\n * Kill the given worker by `id` and `signal`.\n */\n\ndefine('kill', function(master, sock, id, signal){\n  var worker = master.children[id];\n  if (worker) {\n    worker.proc.kill(signal);\n    sock.write('sent \\033[36m' + (signal || 'SIGTERM') + '\\033[0m to worker #' + id + '\\n');\n  } else {\n    sock.write('invalid worker id\\n');\n  }\n}, 'Send signal or SIGTERM to the given worker');\n\n/**\n * Gracefully shutdown.\n */\n\ndefine('shutdown', function(master, sock){\n  master.close();\n}, 'Gracefully shutdown server');\n\n/**\n * Hard shutdown.\n */\n\ndefine('stop', function(master, sock){\n  master.destroy();\n}, 'Hard shutdown');\n\n/**\n * Gracefully restart all workers.\n */\n\ndefine('restart', function(master, sock){\n  master.restart();\n}, 'Gracefully restart all workers');","/home/travis/build/npmtest/node-npmtest-cluster/node_modules/cluster/lib/plugins/stats.js":"\n/*!\n * Cluster - stats\n * Copyright (c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs')\n  , Log = require('log')\n  , repl = require('./repl')\n  , utils = require('../utils')\n  , os = require('os');\n\n/**\n * Enable stat tracking with the given `options`.\n *\n * Options:\n *\n *  - `connections`    enable connection statistics\n *  - `requests`       enable request statistics\n *  - `lightRequests`  enable light-weight request statistics\n *\n * Real-time applications should utilize `lightRequests` for reporting\n * when possible, although less data is available.\n *\n * TODO: UDP\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function(options){\n  options = options || {};\n  stats.enableInWorker = options.connections || options.requests;\n\n  function stats(master){\n    var server = master.server;\n    master.connectionStats = options.connections;\n    master.requestStats = options.requests;\n    master.lightRequestStats = options.lightRequests;\n\n    // worker stats\n    if (master.isWorker) {\n      var id = 0;\n  \n      // connections\n      if (options.connections) {\n        server.on('connection', function(sock){\n          var data = { remoteAddress: sock.remoteAddress };\n          master.call('reportStats', 'connection', data);\n          sock.on('close', function(){\n            master.call('reportStats', 'disconnection', data);\n          });\n        });\n      }\n\n      // light-weight requests\n      if (options.lightRequests) {\n        utils.unshiftListener(server, 'request', function(req, res){\n          master.call('reportStats', 'light request', res.id = ++id);\n          var end = res.end;\n          res.end = function(str, encoding){\n            res.end = end;\n            res.end(str, encoding);\n            master.call('reportStats', 'light request complete', res.id);\n          };\n        });\n      } \n\n      // requests\n      if (options.requests) {\n        utils.unshiftListener(server, 'request', function(req, res){\n          var data = {\n              remoteAddress: req.socket.remoteAddress\n            , headers: req.headers\n            , httpVersion: req.httpVersion\n            , method: req.method\n            , url: req.url\n            , id: ++id\n          };\n\n          master.call('reportStats', 'request', data);\n\n          var end = res.end;\n          res.end = function(str, encoding){\n            res.end = end;\n            res.end(str, encoding);\n            master.call('reportStats', 'request complete', data);\n          };\n        });\n      }\n    // master stats\n    } else {\n      master.stats = {\n          start: new Date\n        , restarts: 0\n        , workersSpawned: 0\n        , workersKilled: 0\n      };\n\n      // 0.4.x\n      if (os) {\n        master.stats.totalmem = os.totalmem();\n        master.stats.freemem = os.freemem();\n      }\n\n      // worker stats\n      master.reportStats = function(worker, type, data){\n        master.emit('client ' + type, worker, data);\n        switch (type) {\n          case 'connection':\n            worker.stats.connectionsTotal++;\n            worker.stats.connectionsActive++;\n            break;\n          case 'disconnection':\n            worker.stats.connectionsActive--;\n            break;\n          case 'light request':\n          case 'request':\n            worker.stats.requestsTotal++;\n        }\n      };\n\n      // total workers spawned\n      master.on('worker', function(worker){\n        ++master.stats.workersSpawned;\n        worker.stats = {\n            start: new Date\n          , connectionsTotal: 0\n          , connectionsActive: 0\n          , requestsTotal: 0\n        };\n      });\n\n      // total worker deaths\n      master.on('worker killed', function(worker){\n        ++master.stats.workersKilled;\n      });\n\n      // restarting\n      master.on('restarting', function(data){\n        ++master.stats.restarts;\n        data.stats = master.stats;\n      });\n\n      // restart\n      master.on('restart', function(data){\n        master.stats = data.stats;\n        master.stats.start = new Date(master.stats.start);\n      });\n    }\n  }\n\n  return stats;\n};\n\n/**\n * REPL statistics command.\n */\n\nrepl.define('stats', function(master, sock){\n  var active = master.children.length\n    , total = master.stats.workersSpawned\n    , deaths = master.stats.workersKilled\n    , restarts = master.stats.restarts;\n\n  // master stats\n  sock.title('Master');\n  if (os) sock.row('os', os.type() + ' ' + os.release());\n  sock.row('state', master.state);\n  sock.row('started', master.stats.start.toUTCString());\n  sock.row('uptime', utils.formatDateRange(new Date, master.stats.start));\n  sock.row('restarts', restarts);\n  sock.row('workers', active);\n  sock.row('deaths', deaths);\n\n  // resources\n  if (os) {\n    sock.title('Resources');\n    sock.row('load average', os.loadavg().map(function(n){ return n.toFixed(2); }).join(' '));\n    sock.row('cores utilized', active + ' / ' + os.cpus().length);\n    var free = utils.formatBytes(master.stats.freemem);\n    var total = utils.formatBytes(master.stats.totalmem);\n    sock.row('memory at boot (free / total)', free + ' / ' + total);\n    var free = utils.formatBytes(os.freemem());\n    var total = utils.formatBytes(os.totalmem());\n    sock.row('memory now (free / total)', free + ' / ' + total);\n  }\n\n  // worker stats\n  sock.title('Workers');\n\n  // connections\n  if (master.connectionStats) {\n    sock.row('connections total', sum(master.children, 'connectionsTotal'));\n    sock.row('connections active', sum(master.children, 'connectionsActive'));\n  }\n\n  // requests\n  if (master.requestStats) {\n    sock.row('requests total', sum(master.children, 'requestsTotal'));\n  }\n\n  master.children.forEach(function(worker){\n    var stats = ''\n      , piped = [];\n\n    // uptime\n    stats += utils.formatDateRange(new Date, worker.stats.start);\n\n    // connections\n    if (master.connectionStats) {\n      piped.push(worker.stats.connectionsActive);\n      piped.push(worker.stats.connectionsTotal);\n    }\n\n    // requests\n    if (master.requestStats) {\n      piped.push(worker.stats.requestsTotal);\n    }\n\n    if (piped.length) {\n      stats += ' ' + piped.join('\\033[90m|\\033[0m');\n    }\n\n    sock.row(worker.id, stats);\n  });\n  sock.write('\\n');\n}, 'Display server statistics');\n\n\n/**\n * Return sum of each `prop` in `arr`.\n *\n * @param {Array} arr\n * @param {String} prop\n * @return {Number}\n * @api private\n */\n\nfunction sum(arr, prop){\n  return arr.reduce(function(sum, obj){\n    return sum + obj.stats[prop];\n  }, 0);\n};\n"}